Save Environment Configuration:
Use the AWS CLI to describe your Elastic Beanstalk environment and save the configuration to a file:

bash

aws elasticbeanstalk describe-configuration-settings \
  --application-name YourApplicationName \
  --environment-name YourEnvironmentName \
  > environment_config.json
Replace YourApplicationName and YourEnvironmentName with your actual application and environment names.

Terminate the Environment:
Terminate the Elastic Beanstalk environment:

bash

aws elasticbeanstalk terminate-environment --environment-name YourEnvironmentName
Replace YourEnvironmentName with your actual environment name.

Recreate the Environment:
Recreate the Elastic Beanstalk environment using the saved configuration:

bash

aws elasticbeanstalk create-environment \
  --application-name YourApplicationName \
  --environment-name YourNewEnvironmentName \
  --template-name YourSavedTemplateName \
  --option-settings file://environment_config.json
Replace YourNewEnvironmentName with the desired new environment name.
Replace YourSavedTemplateName with the saved template name from the environment_config.json file.
Notes:
Be cautious about saving and using configuration files, as they may contain sensitive information.
Make sure to customize the commands based on your actual application and environment names.
Keep in mind that Elastic Beanstalk environments may have dependencies and resources (like databases or storage) that need to be recreated separately.
While this approach allows you to capture and reuse environment settings, it's essential to consider the implications, especially regarding data persistence and any external dependencies your application might have. Always test the process in a safe environment before applying it to a production setup.

@create keypair:
last part:
chmod 400 key-pair-name.pem


@login to to ec2 from cloudshel:
icacls "C:\downloads\your-private-key.pem" /inheritance:r
icacls "C:\downloads\your-private-key.pem" /grant:r "%USERNAME%:R"

ssh -i "c:\downloads\your-key-pair.pem" ec2-user@ec2-123-456-789-012.compute-1.amazonaws.com

@Checking security group rules:
aws ec2 describe-instances --instance-ids YourInstanceId --query 'Reservations[*].Instances[*].[SecurityGroups[*].GroupId]' --output text
