To add another server block with a different document root for serving a React frontend app on port 8000, you can modify your nginx.conf file as follows:

nginx

user                    nginx;
error_log               /var/log/nginx/error.log warn;
pid                     /var/run/nginx.pid;
worker_processes        auto;
worker_rlimit_nofile    200000;

events {
    worker_connections  1024;
}

http {
    server_tokens off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    map $http_upgrade $connection_upgrade {
        default     "upgrade";
    }

    upstream php-fpm {
        server unix:/run/php-fpm/www.sock;
    }

    server {
        listen 80 default_server;
        access_log    /var/log/nginx/access.log main;

        client_header_timeout 60;
        client_body_timeout   60;
        keepalive_timeout     60;
        gzip                  off;
        gzip_comp_level       4;
        gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        # Include the Elastic Beanstalk generated locations
        include conf.d/elasticbeanstalk/*.conf;

        # Include the code-server proxy configuration
        #include conf.d/code-server.conf;

        include conf.d/accommo.conf;
    }

    server {
        listen 8000;
        server_name localhost;  # Change this to your domain or IP if needed

        root /var/www/html/frontend/public;  # Change this to the path of your React app

        index index.html;

        location / {
            try_files $uri /index.html;
        }

        access_log /var/log/nginx/frontend-access.log;
        error_log /var/log/nginx/frontend-error.log;

        # Additional configuration for your React app can go here
    }
}
Replace /var/www/html/frontend/public with the actual path to your React app. After making these changes, restart Nginx for the configuration to take effect:

bash

sudo systemctl restart nginx
Now, your React app should be accessible at http://your-server-ip:8000 or http://localhost:8000. Adjust the server_name directive if you have a specific domain or IP for your React app.




@run react app besides php backend:
To automatically run npm run serve for your React app as soon as Linux loads, you can use a process manager like pm2. Here's a step-by-step guide:

Install pm2 globally:

bash

sudo npm install -g pm2
Navigate to your React app's directory:

bash

cd /var/www/html/frontend
Run your React app with pm2:

bash

pm2 start npm --name "frontend" -- start
This assumes that your npm start script is configured in your package.json file. If your start script is different, adjust the command accordingly.

Save the current pm2 configuration:

bash

pm2 save
This ensures that pm2 will restart your React app after a system reboot.

Enable startup script to start pm2 on system boot:

bash

pm2 startup
Follow the instructions provided by pm2. It may ask you to run a specific command based on your operating system.

Now, whenever your system starts, pm2 will automatically start your React app using npm run serve. You can monitor your app's logs, restart, or stop it using pm2 commands. For example:

To view logs:

bash

pm2 logs frontend
To restart the app:

bash

pm2 restart frontend
To stop the app:

bash

pm2 stop frontend
Make sure to replace "frontend" with your desired process name if you choose a different one.

how can run /var/www/html/frontend/npm run serve  as soon as the linux loads? that will spin up my react server.

To automatically run npm run serve for your React app as soon as Linux loads, you can use a process manager like pm2. Here's a step-by-step guide:

Install pm2 globally:

bash

sudo npm install -g pm2
Navigate to your React app's directory:

bash

cd /var/www/html/frontend
Run your React app with pm2:

bash

pm2 start npm --name "frontend" -- start
This assumes that your npm start script is configured in your package.json file. If your start script is different, adjust the command accordingly.

Save the current pm2 configuration:

bash

pm2 save
This ensures that pm2 will restart your React app after a system reboot.

Enable startup script to start pm2 on system boot:

bash

pm2 startup
Follow the instructions provided by pm2. It may ask you to run a specific command based on your operating system.

Now, whenever your system starts, pm2 will automatically start your React app using npm run serve. You can monitor your app's logs, restart, or stop it using pm2 commands. For example:

To view logs:

bash

pm2 logs frontend
To restart the app:

bash

pm2 restart frontend
To stop the app:

bash

pm2 stop frontend
Make sure to replace "frontend" with your desired process name if you choose a different one.




